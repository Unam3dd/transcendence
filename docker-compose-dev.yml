version: '3.9'

networks:
  transcendence:
    driver: bridge

# VOLUMES

volumes:
  db:
    name: db
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/postgresql/

services:

  # PostgreSQL DATABASE

  postgresql:
    hostname: postgresql-dev
    build:
      context: ./containers/postgresql/
      dockerfile: Dockerfile
    container_name: postgresql
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: --no-locale --encoding=UTF-8
      PG_DATA: /var/lib/postgresql/data
    volumes:
      - type: bind
        source: ./volumes/db
        target: /var/lib/postgresql/data
        bind:
          create_host_path: true
    healthcheck:
      test: nc -w 5 127.0.0.1 5432
      interval: 30s
      timeout: 10s
      retries: 5
    ports:
     - "${DB_PORT}:5432"
    networks:
      - transcendence
  
  # Adminer

  adminer:
    hostname: adminer-dev
    image: adminer:latest
    container_name: adminer
    restart: on-failure
    env_file:
      - .env
    ports:
     - "${ADMINER_PORT}:8080"
    depends_on:
      postgresql:
        condition: service_healthy
    networks:
      - transcendence

  # Angular

  angular:
    hostname: angular-dev
    container_name: angular
    build:
      context: ./containers/nodejs
      dockerfile: Dockerfile
    command: ["npm", "run", "start"]
    volumes:
      - type: bind
        source: ./frontend
        target: /project/
        bind:
          create_host_path: true
    ports:
      - 4200:4200
    depends_on:
      postgresql:
        condition: service_healthy
    healthcheck:
      test: nc -w 5 127.0.0.1 4200
      interval: 5s
      retries: 30
    restart: always
    networks:
      - transcendence
  
  # NestJS
  nestjs:
    hostname: nestjs-dev
    container_name: nestjs
    build:
      context: ./containers/nodejs
      dockerfile: Dockerfile
    command: ["npm", "run", "start:dev" ]
    volumes:
      - type: bind
        source: ./backend
        target: /project/
        bind:
          create_host_path: true
      - ./.env:/project/.env
    depends_on:
      postgresql:
        condition: service_healthy
      angular:
        condition: service_healthy
    ports:
      - "3000:3000"
      - "3001:3001"
    healthcheck:
      test: nc -w 5 127.0.0.1 3000
      interval: 5s
      retries: 30
    restart: on-failure
    networks:
      - transcendence

  # Other alternative is harbor but the techstack is too big  
  portainer:
      hostname: portainer-dev
      container_name: portainer
      image: portainer/portainer-ce
      restart: on-failure
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
      ports:
        - "8080:8080"
        - "9443:9443"